{"version":3,"sources":["components/createRovers.js","components/graph.js","App.js","serviceWorker.js","index.js"],"names":["CreateRovers","props","handleAlert","handleInfoLoading","setState","show","state","Form","Row","Col","xs","InputGroup","Text","id","FormControl","className","placeholder","onChange","this","handleRoverLocationX","handleMovementsInput","Button","onClick","variant","handleRoverMovment","handleVisual","title","text","onConfirm","React","Component","Graph","randomColor","Math","floor","random","toString","Container","width","height","chartType","loader","data","options","colors","pointShape","pointSize","hAxis","minValue","maxValue","bounds","x","vAxis","y","rootProps","Accordion","Card","Header","Toggle","as","eventKey","Collapse","Body","finalCoordinates","dataMovm","App","handleClearBtn","clearBtn","handleShowBtn","handleCollectBtn","boundX","boundY","e","moves","currentTarget","value","replace","roverMoves","toUpperCase","handleRovers","length","rovers","push","deployedRovers","input","split","gridX","gridY","gridZ","parseInt","mvm","z","k","movement","currentX","currentY","currentHeading","i","start","disabled","deployUnits","Prepend","map","rover","key","handleRoverLocationZ","handleRoverLocationY","closeShow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.607575e0.chunk.js","sourcesContent":["import React from 'react'\nimport { InputGroup, FormControl, Button,Form ,Col } from 'react-bootstrap';\nimport SweetAlert from 'sweetalert2-react';\n\n\n\nexport default class CreateRovers extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n        show: false\n        };\n      }\n    handleAlert=()=>{ //handles state of notificaions as well as loading info for each rovers\n        this.props.handleInfoLoading()\n        this.setState({ show: true })\n    }  \n\n     \n    render(){\n        return(\n            <div>\n            <div > \n            <Form >\n            <Form.Row>\n                <Col xs={3}>\n                <InputGroup.Text id=\"basic-addon1\">Rover's Coordinates</InputGroup.Text>\n                <FormControl className=\"input-group-move\"  placeholder=\"ex: 12N\" onChange={this.props.handleRoverLocationX}/>\n                </Col>\n                <Col>\n                <InputGroup.Text>Instructions</InputGroup.Text>\n                <FormControl className=\"input-group-move\" placeholder=\"ex: LMLMLMLMM\" onChange={this.props.handleMovementsInput}/>\n                </Col>\n                <Col>\n                <Button onClick={this.handleAlert} variant=\"outline-info\">Load Data</Button>\n                <Button onClick={this.props.handleRoverMovment} variant=\"outline-danger\">Start</Button>\n                <Button onClick={this.props.handleVisual} variant=\"outline-dark\">Clear</Button>\n                </Col>\n            </Form.Row>\n           \n            </Form>\n                <div>\n                <SweetAlert\n                    show={this.state.show} //Notification that data has beenn loded to the current rover's memory\n                    title=\"Data Loaded\"\n                    text=\"Press Start to deploy\"\n                    onConfirm={() => this.setState({ show: false })}/>\n                </div>\n\n            </div> \n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { Chart } from \"react-google-charts\";\nimport { Accordion, Card, Button , Container, Row, Col  } from 'react-bootstrap';\n\nexport default class Graph extends React.Component{\n    \n    render(){\n    let randomColor = '#'+Math.floor(Math.random()*16777215).toString(16) //generate random color\n        return(\n            <div >\n\n            <Container>\n            <Row>\n                <Col>\n                <Chart\n                width={'1200px'}\n                height={'400px'}\n                chartType=\"LineChart\"\n                loader={<div>Loading Chart</div>}\n                data={this.props.data.data} \n                options={{\n                    colors: [`${randomColor}`],\n                    title: `Rovers Route`,\n                    pointShape: 'diamond',\n                    pointSize: 18,\n                    hAxis: { title: 'S', minValue: 0, maxValue: this.props.bounds.x }, //set the bounds for each graph\n                    vAxis: { title: 'W', minValue: 0, maxValue: this.props.bounds.y },\n                }}\n                rootProps={{ 'data-testid': '1' }}/>\n                </Col>\n                <Col>\n                <Accordion>\n                <Card>\n                    <Card.Header>\n                    <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                        Rover's Report\n                    </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey=\"0\">\n                    <Card.Body>Current Location: {this.props.data.data[2]} {this.props.data.data[0][1]} </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n                </Accordion>\n                </Col>\n            </Row>\n            </Container>\n               \n            </div>\n        )\n    }\n}\n\n","import React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button} from 'react-bootstrap';\nimport CreateRovers from './components/createRovers.js'\nimport Graph from './components/graph.js'\n\nlet finalCoordinates = []\nlet dataMovm=[]\n\nexport default class App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n    gridX: !'',\n    gridY: '', \n    gridZ: '',\n    roverMoves: '', \n    deployedRovers: [],\n    start: false,\n    disabled: false,\n    deployUnits: false,\n    data:[],\n    boundX:'',\n    boundY:'',\n    bounds:[],\n    };\n  }\n  handleClearBtn=()=>{\n    this.setState({clearBtn: true})\n  }\n  handleShowBtn=()=>{\n    this.setState({show: false})\n  }\n  handleCollectBtn=()=>{\n    this.setState({bounds: {x:this.state.boundX, y:this.state.boundY}})\n  }\n  handleMovementsInput=(e)=>{ //regex to make sure input only captures corrent directions. it will only store L , M or R.\n    const checkForLorM = /[^l^m^r]/gi;\n    let moves = e.currentTarget.value.replace(checkForLorM,'')\n    this.setState({roverMoves: moves.toUpperCase()})\n  }\n  handleRovers=()=>{ //handler will create instaces of the desired amount of rovers and push them into and array.\n    if(this.state.data.length === 0){\n      let rovers = []\n      dataMovm=[]\n      rovers.push(1)\n    this.setState({deployedRovers: rovers})\n    }else{\n      this.setState({data: []})\n      dataMovm.length = 0\n    } \n  }\n\n  handleRoverLocationX=(e)=>{\n    let input = e.currentTarget.value.split(\"\")\n    this.setState({gridX: input[0],gridY: input[1], gridZ: input[2]})\n  }\n  handleInfoLoading=()=>{ //resets data array and also sets new data for rovers.\n    dataMovm.length = 0\n    this.setState({data: []})\n    dataMovm.push({x: parseInt(this.state.gridX), \n    y: parseInt(this.state.gridY), \n    mvm: this.state.roverMoves, \n    z: this.state.gridZ})\n    this.setState({data: dataMovm})\n  }\n  handleVisual=()=>{ //resets the array of results and clears the visual.\n    finalCoordinates.length = 0\n    this.setState({data: []})\n  }\n  handleRoverMovment=()=>{ //runs algorithm and start visual graph with algorithm's results.\n    this.setState({data: []})\n    \n    //CODING SOLUTION HERE\n    let north = 'N'\n    let south = 'S'\n    let west = 'W'\n    let east = 'E'\n\n    for(let k=0; k<this.state.data.length; k++){\n      let movement = this.state.data[k].mvm.split(\"\")\n      let currentX= this.state.data[k].x\n      let currentY= this.state.data[k].y\n      let currentHeading = this.state.data[k].z.toUpperCase()\n\n    for(let i=0; i<movement.length; i++){ //we are going to loop over movements after spliting the movement string.Also, we going to check one by one whether is L or R to determine were the rover is heading next.\n        switch (movement[i]) {\n          case \"L\":\n            if(currentHeading === north){\n              currentHeading = west\n              break;\n            }else if(currentHeading === west){\n              currentHeading = south\n              break;\n            }else if(currentHeading === south){\n              currentHeading = east\n              break;\n            }else if(currentHeading === east){\n              currentHeading = north\n              break;\n            }\n            break;\n            default:\n          case \"R\":\n            if(currentHeading === north){\n              currentHeading = east\n              break;\n            }else if(currentHeading === east){\n              currentHeading = south\n              break;\n            }else if(currentHeading === south){\n              currentHeading = west\n              break;\n            }else if(currentHeading === west){\n              currentHeading = north\n              break;\n            }\n            break;\n          case \"M\": \n            if(currentHeading === north){\n              currentY++\n              break;\n            }else if(currentHeading === east){\n              currentX++\n              break;\n            }else if(currentHeading === south){\n              currentY--\n              break;\n            }else if(currentHeading === west){\n              currentX--\n              break;\n          }  \n          break;\n        }\n      }\n      finalCoordinates.push({data:[[\"x\",`Heading: ${currentHeading}`],[this.state.data[k].x,this.state.data[k].y],[currentX, currentY]]})\n    }\n   \n  }\n\n  render(){\n    return (\n      \n      <div className=\"App\">\n        <div className=\"input-location\">\n        <div>\n        <InputGroup className=\"mb-2\"> \n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\">Exploration grid bounds</InputGroup.Text>\n          <FormControl className=\"input-group\"  onChange={(e)=>{this.setState({boundX: e.currentTarget.value})}}/>\n          <FormControl className=\"input-group\"  onChange={(e)=>{this.setState({boundY: e.currentTarget.value})}}/>\n          <Button variant=\"outline-info\" onClick={this.handleCollectBtn} disabled={this.state.disabled} >Set</Button>\n          </InputGroup.Prepend>\n          <br></br>\n          <Button onClick={this.handleRovers} disabled={this.state.disabled} variant=\"outline-info\">Build Rover</Button>\n          \n        </InputGroup>\n        </div>\n\n        {this.state.deployedRovers.map(rover => \n          <CreateRovers rover={rover} key={rover}\n          handleRoverLocationZ={this.handleRoverLocationZ} \n          handleRoverLocationY={this.handleRoverLocationY} \n          handleRoverLocationX={this.handleRoverLocationX} \n          handleMovementsInput={this.handleMovementsInput} \n          handleInfoLoading={this.handleInfoLoading}\n          handleRoverMovment={this.handleRoverMovment}\n          handleVisual={this.handleVisual}\n          show={this.state.show}\n          closeShow={this.state.handleShowBtn}/>\n        )}\n\n        </div>\n      \n        <div>\n        {finalCoordinates.map(data =>\n         <Graph key={data} bounds={this.state.bounds} handleClearBtn={this.handleClearBtn} data={data}/>\n        )}\n        </div>\n      </div>\n    );\n  }\n  \n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}