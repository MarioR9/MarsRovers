
let direction = {x:3, y:3, movement:"MMRMMRMRRM", heading:"E"}
let boundrie = {height: 5, width:5}
let result = {}

setSurface = (boundrie) => {
  let width = boundrie.width
  let height = boundrie.height
  console.log(`Grid Size: ${width} x ${height}`)
}

move = (direction) => {
  setSurface(boundrie)
  let movements = direction.movement.split("")
  for(let i = 0; i < movements.length; i++){
    switch(direction.movement[i]) {
    case 'L':
    turnLeft(direction);
      break;
    case 'R':
    turnRight(direction);
      break;
    default:
    case 'M':
    moveForward(direction)
      break;     
    } 
     console.log(`Rover's Current Position: X:${result.x} Y:${result.y} heading:${result.heading}`) 
  }
  console.log(`Rover's Last Position: X:${result.x} Y:${result.y} heading:${result.heading}`) 
}

moveForward = (direction) =>{
  
  switch(direction.heading) {
    case 'N':
      direction.y++;
      result = {x: direction.x, y: direction.y, heading: direction.heading}
      break;
    case 'S':
      direction.y--;
      result = {x: direction.x, y: direction.y, heading: direction.heading}
      break;
    default:
    case 'W':
      direction.x--;
      result = {x: direction.x, y: direction.y, heading: direction.heading}
      break;
    case 'E':
      direction.x++;
      result = {x: direction.x, y: direction.y, heading: direction.heading}
      break;     
  }   

}

turnLeft = (direction) =>{

  switch(direction.heading) {
    case 'N':
      direction.heading = 'W';
      result = {x: direction.x, y: direction.y, heading: direction.heading}
      break;
    case 'S':
      direction.heading = 'E';
      result = {x: direction.x, y: direction.y, heading: direction.heading}
      break;
    default:
    case 'W':
      direction.heading = 'S';
      result = {x: direction.x, y: direction.y, heading: direction.headingt}
      break;
    case 'E':
      direction.heading = 'N';
      result = {x: direction.x, y: direction.y, heading: direction.heading}
      break;     
  }   

}

turnRight = (direction) => {
  
  switch(direction.heading) {
    case 'N':
      direction.heading = 'E';
      result = {x: direction.x, y: direction.y, heading: direction.heading}
      break;
    case 'S':
      direction.heading = 'W';
      result = {x: direction.x, y: direction.y, heading: direction.heading}
      break;
    default:
    case 'W':
      direction.heading = 'N';
      result = {x: direction.x, y: direction.y, heading: direction.heading}
      break;
    case 'E':
      direction.heading = 'S';
      result = {x: direction.x, y: direction.y, heading: direction.heading}
      break;     
  }   
}
 
