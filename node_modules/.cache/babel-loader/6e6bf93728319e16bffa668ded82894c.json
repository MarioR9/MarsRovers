{"ast":null,"code":"var _jsxFileName = \"/Users/macone/Development/codeChallenge/MarsRovers/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport CreateRovers from './components/createRovers.js';\nimport Graph from './components/graph.js';\nlet finalCoordinates = [];\nlet dataMovm = [];\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMovements = e => {\n      //Regex will prevent from storing any numbers or symbols. Only storeing set moves either M or L.\n      dataMovm.push({\n        x: parseInt(this.state.gridX),\n        y: parseInt(this.state.gridY),\n        mvm: this.state.roverMoves,\n        z: this.state.gridZ\n      });\n      this.setState({\n        data: dataMovm\n      });\n    };\n\n    this.handleMovementsInput = e => {\n      const checkForLorM = /[^l^m^r]/gi;\n      let moves = e.currentTarget.value.replace(checkForLorM, '');\n      this.setState({\n        roverMoves: moves.toUpperCase()\n      });\n    };\n\n    this.handleRovers = () => {\n      //handler will create instaces of the desired amount of rovers and push them into and array.\n      let counter = 1;\n      let rovers = [];\n      dataMovm = [];\n      let nOfRovers = parseInt(this.state.numberOfRovers);\n\n      for (let i = 0; i < nOfRovers; i++) {\n        rovers.push(counter++);\n      }\n\n      this.setState({\n        start: 'ready'\n      });\n    };\n\n    this.handleRoverLocationX = e => {\n      this.setState({\n        gridX: e.currentTarget.value\n      });\n    };\n\n    this.handleRoverLocationY = e => {\n      this.setState({\n        gridY: e.currentTarget.value\n      });\n    };\n\n    this.handleRoverLocationZ = e => {\n      this.setState({\n        gridZ: e.currentTarget.value\n      });\n    };\n\n    this.handleRoverMovment = () => {\n      dataMovm.push({\n        x: parseInt(this.state.gridX),\n        y: parseInt(this.state.gridY),\n        mvm: this.state.roverMoves,\n        z: this.state.gridZ\n      });\n      this.setState({\n        data: dataMovm\n      });\n      let north = 'N';\n      let south = 'S';\n      let west = 'W';\n      let east = 'E';\n\n      for (let k = 0; k < this.state.data.length; k++) {\n        let movement = this.state.data[k].mvm.split(\"\");\n        let currentX = this.state.data[k].x;\n        let currentY = this.state.data[k].y;\n        let currentHeading = this.state.data[k].z;\n\n        for (let i = 0; i < movement.length; i++) {\n          //we are going to loop over movements after sliting the movement string. we going to check one by one whether is L or R to determine were the rover is heading next.\n          switch (movement[i]) {\n            case \"L\":\n              if (currentHeading === north) {\n                currentHeading = west;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  z: currentHeading\n                });\n                break;\n              } else if (currentHeading === west) {\n                currentHeading = south;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  z: currentHeading\n                });\n                break;\n              } else if (currentHeading === south) {\n                currentHeading = east;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  z: currentHeading\n                });\n                break;\n              } else if (currentHeading === east) {\n                currentHeading = north;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  z: currentHeading\n                });\n                break;\n              }\n\n              break;\n\n            case \"R\":\n              if (currentHeading === north) {\n                currentHeading = east;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  z: currentHeading\n                });\n                break;\n              } else if (currentHeading === east) {\n                currentHeading = south;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  z: currentHeading\n                });\n                break;\n              } else if (currentHeading === south) {\n                currentHeading = west;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  z: currentHeading\n                });\n                break;\n              } else if (currentHeading === west) {\n                currentHeading = north;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  z: currentHeading\n                });\n                break;\n              }\n\n              break;\n\n            case \"M\":\n              if (currentHeading === north) {\n                currentY++;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  z: currentHeading\n                });\n                break;\n              } else if (currentHeading === east) {\n                currentX++;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  z: currentHeading\n                });\n                break;\n              } else if (currentHeading === south) {\n                currentY--;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  z: currentHeading\n                });\n                break;\n              } else if (currentHeading === west) {\n                currentX--;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  z: currentHeading\n                });\n                break;\n              }\n\n          }\n        }\n\n        finalCoordinates.push({\n          x: currentX,\n          y: currentY,\n          z: currentHeading\n        });\n      }\n\n      console.log(finalCoordinates);\n    };\n\n    this.state = {\n      gridX: '',\n      gridY: '',\n      gridZ: '',\n      numberOfRovers: 0,\n      roverMoves: '',\n      deployedRovers: [],\n      start: \"notready\",\n      disabled: false,\n      deployUnits: false,\n      data: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-location\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"basic-addon1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, \"# of Rovers\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleRovers,\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }, \"Build\")))), this.state.deployedRovers.map(rover => /*#__PURE__*/React.createElement(CreateRovers, {\n      rover: rover,\n      key: rover,\n      handleRoverLocationZ: this.handleRoverLocationZ,\n      handleRoverLocationY: this.handleRoverLocationY,\n      handleRoverLocationX: this.handleRoverLocationX,\n      handleMovementsInput: this.handleMovementsInput,\n      handleRoverMovment: this.handleRoverMovment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }))), finalCoordinates.map(data => /*#__PURE__*/React.createElement(Graph, {\n      data: finalCoordinates,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 10\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/macone/Development/codeChallenge/MarsRovers/src/App.js"],"names":["React","InputGroup","FormControl","Button","CreateRovers","Graph","finalCoordinates","dataMovm","App","Component","constructor","props","handleMovements","e","push","x","parseInt","state","gridX","y","gridY","mvm","roverMoves","z","gridZ","setState","data","handleMovementsInput","checkForLorM","moves","currentTarget","value","replace","toUpperCase","handleRovers","counter","rovers","nOfRovers","numberOfRovers","i","start","handleRoverLocationX","handleRoverLocationY","handleRoverLocationZ","handleRoverMovment","north","south","west","east","k","length","movement","split","currentX","currentY","currentHeading","console","log","deployedRovers","disabled","deployUnits","render","map","rover"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport CreateRovers from './components/createRovers.js'\nimport Graph from './components/graph.js'\n\nlet finalCoordinates = []\nlet dataMovm=[]\n\nexport default class App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {gridX: '',\n    gridY: '', \n    gridZ: '',\n    numberOfRovers: 0 ,\n    roverMoves: '', \n    deployedRovers: [],\n    start: \"notready\",\n    disabled: false,\n    deployUnits: false,\n    data:[]\n    };\n  }\n  handleMovements=(e)=>{ //Regex will prevent from storing any numbers or symbols. Only storeing set moves either M or L.\n    dataMovm.push({x: parseInt(this.state.gridX), y: parseInt(this.state.gridY), mvm: this.state.roverMoves, z: this.state.gridZ})\n    this.setState({data: dataMovm})\n  }\n \n  handleMovementsInput=(e)=>{\n    const checkForLorM = /[^l^m^r]/gi;\n    let moves = e.currentTarget.value.replace(checkForLorM,'')\n    this.setState({roverMoves: moves.toUpperCase()})\n  }\n  handleRovers=()=>{ //handler will create instaces of the desired amount of rovers and push them into and array.\n   let counter = 1\n   let rovers = []\n   dataMovm=[]\n   let nOfRovers = parseInt(this.state.numberOfRovers)\n    for(let i=0; i < nOfRovers; i++){\n      rovers.push(counter++)\n    }\n  this.setState({start: 'ready'})\n  }\n\n  handleRoverLocationX=(e)=>{\n    this.setState({gridX: e.currentTarget.value})\n  }\n  handleRoverLocationY=(e)=>{\n    this.setState({gridY: e.currentTarget.value})\n  }\n  handleRoverLocationZ=(e)=>{\n    this.setState({gridZ: e.currentTarget.value})\n  }\n  handleRoverMovment=()=>{\n    dataMovm.push({x: parseInt(this.state.gridX), y: parseInt(this.state.gridY), mvm: this.state.roverMoves, z: this.state.gridZ})\n    this.setState({data: dataMovm})\n\n    let north = 'N'\n    let south = 'S'\n    let west = 'W'\n    let east = 'E'\n\n    for(let k=0; k<this.state.data.length; k++){\n      let movement = this.state.data[k].mvm.split(\"\")\n      let currentX= this.state.data[k].x\n      let currentY= this.state.data[k].y\n      let currentHeading = this.state.data[k].z\n\n      for(let i=0; i<movement.length; i++){ //we are going to loop over movements after sliting the movement string. we going to check one by one whether is L or R to determine were the rover is heading next.\n        switch (movement[i]) {\n          case \"L\":\n            if(currentHeading === north){\n              currentHeading = west\n              finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n              break;\n            }else if(currentHeading === west){\n              currentHeading = south\n              finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n              break;\n            }else if(currentHeading === south){\n              currentHeading = east\n              finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n              break;\n            }else if(currentHeading === east){\n              currentHeading = north\n              finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n              break;\n            }\n            break;\n          case \"R\":\n            if(currentHeading === north){\n              currentHeading = east\n              finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n              break;\n            }else if(currentHeading === east){\n              currentHeading = south\n              finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n              break;\n            }else if(currentHeading === south){\n              currentHeading = west\n              finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n              break;\n            }else if(currentHeading === west){\n              currentHeading = north\n              finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n              break;\n            }\n            break;\n          case \"M\": \n            if(currentHeading === north){\n              currentY++\n              finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n              break;\n            }else if(currentHeading === east){\n              currentX++\n              finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n              break;\n            }else if(currentHeading === south){\n              currentY--\n              finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n              break;\n            }else if(currentHeading === west){\n              currentX--\n              finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n              break;\n          }  \n        }\n      }\n      finalCoordinates.push({x:currentX, y:currentY, z:currentHeading})\n    }\n    console.log(finalCoordinates)\n  }\n\n  render(){\n    return (\n      \n      <div className=\"App\">\n      {/* <Button onClick={()=>{window.location.reload()}}>Start Again</Button> */}\n        <div className=\"input-location\">\n        <div>\n        <InputGroup className=\"mb-3\"> \n          <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\"># of Rovers</InputGroup.Text>\n          <Button onClick={this.handleRovers} variant=\"info\">Build</Button>\n          </InputGroup.Prepend>\n        </InputGroup>\n        </div>\n\n        {this.state.deployedRovers.map(rover => \n\n          <CreateRovers rover={rover} key={rover}\n          handleRoverLocationZ={this.handleRoverLocationZ} \n          handleRoverLocationY={this.handleRoverLocationY} \n          handleRoverLocationX={this.handleRoverLocationX} \n          handleMovementsInput={this.handleMovementsInput} \n          handleRoverMovment={this.handleRoverMovment}/>\n          )}\n        </div>\n        \n        {finalCoordinates.map(data =>\n         <Graph data={finalCoordinates}/>\n        )}\n       \n       \n          \n      </div>\n    );\n  }\n  \n}\n\n"]},"metadata":{},"sourceType":"module"}