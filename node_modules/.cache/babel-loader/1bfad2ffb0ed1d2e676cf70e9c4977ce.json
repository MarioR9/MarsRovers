{"ast":null,"code":"var _jsxFileName = \"/Users/macone/Development/codeChallenge/MarsRovers/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport CreateRovers from './components/createRovers.js';\nimport Graph from './components/graph.js';\nlet data = [];\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMovements = e => {\n      //Regex will prevent from storing any numbers or symbols. Only storeing set moves either M or L.\n      const checkForLorM = /[^l^m]/gi;\n      let moves = this.state.roverMoves.replace(checkForLorM, '');\n      this.setState({\n        roverMoves: moves.toUpperCase(),\n        disabled: true\n      });\n      data.push(moves);\n      console.log(data);\n    };\n\n    this.handleMovementsInput = e => {\n      this.setState({\n        roverMoves: e.currentTarget.value\n      });\n    };\n\n    this.handleRovers = () => {\n      //handler will create instaces of the desired amount of rovers and push them into and array.\n      let counter = 1;\n      let rovers = [];\n      data = [];\n      let nOfRovers = parseInt(this.state.numberOfRovers);\n\n      for (let i = 0; i < nOfRovers; i++) {\n        rovers.push(counter++);\n      }\n\n      this.setState({\n        deployedRovers: rovers,\n        start: 'ready'\n      });\n    };\n\n    this.handleUnitsDeployment = () => {\n      this.setState({\n        deployUnits: true\n      });\n    };\n\n    this.state = {\n      gridX: '',\n      gridY: '',\n      numberOfRovers: 0,\n      roverMoves: '',\n      deployedRovers: [],\n      start: \"notready\",\n      disabled: false,\n      deployUnits: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-location\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"basic-addon1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, \"Grid Bounds \"), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group\",\n      onChange: e => {\n        this.setState({\n          gridX: e.currentTarget.value\n        });\n      },\n      \"aria-label\": \"gridPositionX\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group\",\n      onChange: e => {\n        this.setState({\n          gridY: e.currentTarget.value\n        });\n      },\n      \"aria-label\": \"gridPositionY\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"basic-addon1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, \"# of Rovers\"), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group\",\n      onChange: e => {\n        this.setState({\n          numberOfRovers: e.currentTarget.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleRovers,\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, \"Build\")))), this.state.deployedRovers.map(rover => /*#__PURE__*/React.createElement(CreateRovers, {\n      handleMovementsInput: this.handleMovementsInput,\n      handleMovements: this.handleMovements,\n      rover: rover,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    })), this.state.start === \"notready\" ? null : /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleRovers,\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 53\n      }\n    }, \"Deploy units\")), this.state.deployUnits === true ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Graph, {\n      data: this.state.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    })) : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/macone/Development/codeChallenge/MarsRovers/src/App.js"],"names":["React","InputGroup","FormControl","Button","CreateRovers","Graph","data","App","Component","constructor","props","handleMovements","e","checkForLorM","moves","state","roverMoves","replace","setState","toUpperCase","disabled","push","console","log","handleMovementsInput","currentTarget","value","handleRovers","counter","rovers","nOfRovers","parseInt","numberOfRovers","i","deployedRovers","start","handleUnitsDeployment","deployUnits","gridX","gridY","render","map","rover"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport CreateRovers from './components/createRovers.js'\nimport Graph from './components/graph.js'\n\n\nlet data=[]\nexport default class App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {gridX: '',\n    gridY: '', \n    numberOfRovers: 0 ,\n    roverMoves: '', \n    deployedRovers: [],\n    start: \"notready\",\n    disabled: false,\n    deployUnits: false\n    };\n  }\n  handleMovements=(e)=>{ //Regex will prevent from storing any numbers or symbols. Only storeing set moves either M or L.\n    const checkForLorM = /[^l^m]/gi;\n    let moves = this.state.roverMoves.replace(checkForLorM,'')\n    this.setState({roverMoves: moves.toUpperCase(),disabled: true})\n    data.push(moves)\n    console.log(data)\n  }\n \n  handleMovementsInput=(e)=>{\n    this.setState({roverMoves: e.currentTarget.value})\n  }\n  handleRovers=()=>{ //handler will create instaces of the desired amount of rovers and push them into and array.\n   let counter = 1\n   let rovers = []\n   data=[]\n   let nOfRovers = parseInt(this.state.numberOfRovers)\n    for(let i=0; i < nOfRovers; i++){\n      rovers.push(counter++)\n    }\n    this.setState({deployedRovers: rovers, start: 'ready'})\n  }\n  handleUnitsDeployment=()=>{\n    this.setState({deployUnits: true})\n  }\n  render(){\n    return (\n      <div className=\"App\"> \n        <div className=\"input-location\">\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\">Grid Bounds </InputGroup.Text>\n          <FormControl className=\"input-group\" onChange={(e)=>{this.setState({gridX: e.currentTarget.value})}}\n          aria-label=\"gridPositionX\"\n          />\n          <FormControl className=\"input-group\" onChange={(e)=>{this.setState({gridY: e.currentTarget.value})}}\n          aria-label=\"gridPositionY\"\n          />\n          </InputGroup.Prepend>\n        </InputGroup>\n        <div>\n        <InputGroup className=\"mb-3\"> \n          <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\"># of Rovers</InputGroup.Text>\n          <FormControl className=\"input-group\" onChange={(e)=>{this.setState({numberOfRovers: e.currentTarget.value})}}\n          />\n          <Button onClick={this.handleRovers} variant=\"info\">Build</Button>\n          </InputGroup.Prepend>\n        </InputGroup>\n        </div>\n        {this.state.deployedRovers.map(rover => \n          <CreateRovers handleMovementsInput={this.handleMovementsInput} handleMovements={this.handleMovements} rover={rover}/>\n          )}\n         {this.state.start === \"notready\" ? null :  <Button onClick={this.handleRovers} variant=\"info\">Deploy units</Button>}\n        </div>\n        {this.state.deployUnits === true?\n        <div>\n        <Graph data={this.state.data}/>\n       </div>\n          :\n          null\n          }\n        \n      </div>\n    );\n  }\n  \n}\n\n"]},"metadata":{},"sourceType":"module"}