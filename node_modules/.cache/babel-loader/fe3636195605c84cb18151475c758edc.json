{"ast":null,"code":"var _jsxFileName = \"/Users/macone/Development/codeChallenge/MarsRovers/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport CreateRovers from './components/createRovers.js';\nimport Graph from './components/graph.js';\nlet finalCoordinates = [];\nlet dataMovm = [];\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMovements = e => {\n      //Regex will prevent from storing any numbers or symbols. Only storeing set moves either M or L.\n      dataMovm.push({\n        x: this.state.gridX,\n        y: this.state.gridY,\n        mvm: this.state.roverMoves\n      });\n      this.setState({\n        data: dataMovm\n      });\n      console.log(this.state.data);\n    };\n\n    this.handleMovementsInput = e => {\n      const checkForLorM = /[^l^m]/gi;\n      let moves = e.currentTarget.value.replace(checkForLorM, '');\n      this.setState({\n        roverMoves: moves.toUpperCase()\n      });\n    };\n\n    this.handleRovers = () => {\n      //handler will create instaces of the desired amount of rovers and push them into and array.\n      let counter = 1;\n      let rovers = [];\n      dataMovm = [];\n      let nOfRovers = parseInt(this.state.numberOfRovers);\n\n      for (let i = 0; i < nOfRovers; i++) {\n        rovers.push(counter++);\n      }\n\n      this.setState({\n        deployedRovers: rovers,\n        start: 'ready'\n      });\n    };\n\n    this.handleUnitsDeployment = () => {\n      this.setState({\n        deployUnits: true\n      });\n    };\n\n    this.handleRoverLocationX = e => {\n      this.setState({\n        gridX: e.currentTarget.value\n      });\n    };\n\n    this.handleRoverLocationY = e => {\n      this.setState({\n        gridY: e.currentTarget.value\n      });\n    };\n\n    this.handleRoverMovment = () => {\n      let north = 'N';\n      let south = 'S';\n      let west = 'W';\n      let east = 'E';\n      let initCoord = [1, 2, \"N\"];\n      let movement = \"LMLMLMLMM\";\n      let currentX = initCoord[0];\n      let currentY = initCoord[1];\n      let currentHeading = initCoord[2];\n      movement.split(\"\");\n\n      for (let i = 0; i < movement.length; i++) {\n        //we are going to loop over movements after sliting the movement string. we going to check one by one whether is L or R to determine were the rover is heading next.\n        switch (movement[i]) {\n          case \"L\":\n            if (currentHeading == north) {\n              currentHeading = west;\n              finalCoordinates.push({\n                x: currentX,\n                y: currentY,\n                heading: currentHeading\n              });\n              break;\n            } else if (currentHeading == west) {\n              currentHeading = south;\n              finalCoordinates.push({\n                x: currentX,\n                y: currentY,\n                heading: currentHeading\n              });\n              break;\n            } else if (currentHeading == south) {\n              currentHeading = east;\n              finalCoordinates.push({\n                x: currentX,\n                y: currentY,\n                heading: currentHeading\n              });\n              break;\n            } else if (currentHeading == east) {\n              currentHeading = north;\n              finalCoordinates.push({\n                x: currentX,\n                y: currentY,\n                heading: currentHeading\n              });\n              break;\n            }\n\n          case \"R\":\n            if (currentHeading == north) {\n              currentHeading = east;\n              finalCoordinates.push({\n                x: currentX,\n                y: currentY,\n                heading: currentHeading\n              });\n              break;\n            } else if (currentHeading == east) {\n              currentHeading = south;\n              finalCoordinates.push({\n                x: currentX,\n                y: currentY,\n                heading: currentHeading\n              });\n              break;\n            } else if (currentHeading == south) {\n              currentHeading = west;\n              finalCoordinates.push({\n                x: currentX,\n                y: currentY,\n                heading: currentHeading\n              });\n              break;\n            } else if (currentHeading == west) {\n              currentHeading = north;\n              finalCoordinates.push({\n                x: currentX,\n                y: currentY,\n                heading: currentHeading\n              });\n              break;\n            }\n\n          case \"M\":\n            if (currentHeading == north) {\n              currentY++;\n              finalCoordinates.push({\n                x: currentX,\n                y: currentY,\n                heading: currentHeading\n              });\n              break;\n            } else if (currentHeading == east) {\n              currentX++;\n              finalCoordinates.push({\n                x: currentX,\n                y: currentY,\n                heading: currentHeading\n              });\n              break;\n            } else if (currentHeading == south) {\n              currentY--;\n              finalCoordinates.push({\n                x: currentX,\n                y: currentY,\n                heading: currentHeading\n              });\n              break;\n            } else if (currentHeading == west) {\n              currentX--;\n              finalCoordinates.push({\n                x: currentX,\n                y: currentY,\n                heading: currentHeading\n              });\n              break;\n            }\n\n        }\n      }\n\n      console.log(finalCoordinates);\n    };\n\n    this.state = {\n      gridX: '',\n      gridY: '',\n      numberOfRovers: 0,\n      roverMoves: '',\n      deployedRovers: [],\n      start: \"notready\",\n      disabled: false,\n      deployUnits: false,\n      data: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-location\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"basic-addon1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, \"# of Rovers\"), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group\",\n      onChange: e => {\n        this.setState({\n          numberOfRovers: e.currentTarget.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleRovers,\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }, \"Build\")))), this.state.deployedRovers.map(rover => /*#__PURE__*/React.createElement(CreateRovers, {\n      handleRoverLocationY: this.handleRoverLocationY,\n      handleRoverLocationX: this.handleRoverLocationX,\n      handleMovementsInput: this.handleMovementsInput,\n      handleMovements: this.handleMovements,\n      rover: rover,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    })), this.state.start === \"notready\" ? null : /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleRoverMovment,\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 53\n      }\n    }, \"Deploy units\")), this.state.deployUnits === true ? this.state.data.map(data => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Graph, {\n      data: this.state.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }))) : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/macone/Development/codeChallenge/MarsRovers/src/App.js"],"names":["React","InputGroup","FormControl","Button","CreateRovers","Graph","finalCoordinates","dataMovm","App","Component","constructor","props","handleMovements","e","push","x","state","gridX","y","gridY","mvm","roverMoves","setState","data","console","log","handleMovementsInput","checkForLorM","moves","currentTarget","value","replace","toUpperCase","handleRovers","counter","rovers","nOfRovers","parseInt","numberOfRovers","i","deployedRovers","start","handleUnitsDeployment","deployUnits","handleRoverLocationX","handleRoverLocationY","handleRoverMovment","north","south","west","east","initCoord","movement","currentX","currentY","currentHeading","split","length","heading","disabled","render","map","rover"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport CreateRovers from './components/createRovers.js'\nimport Graph from './components/graph.js'\n\nlet finalCoordinates = []\nlet dataMovm=[]\n\nexport default class App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {gridX: '',\n    gridY: '', \n    numberOfRovers: 0 ,\n    roverMoves: '', \n    deployedRovers: [],\n    start: \"notready\",\n    disabled: false,\n    deployUnits: false,\n    data:[]\n    };\n  }\n  handleMovements=(e)=>{ //Regex will prevent from storing any numbers or symbols. Only storeing set moves either M or L.\n    dataMovm.push({x:this.state.gridX,y:this.state.gridY,mvm:this.state.roverMoves})\n    this.setState({data: dataMovm})\n    console.log(this.state.data)\n  }\n \n  handleMovementsInput=(e)=>{\n    const checkForLorM = /[^l^m]/gi;\n    let moves = e.currentTarget.value.replace(checkForLorM,'')\n    this.setState({roverMoves: moves.toUpperCase()})\n  }\n  handleRovers=()=>{ //handler will create instaces of the desired amount of rovers and push them into and array.\n   let counter = 1\n   let rovers = []\n   dataMovm=[]\n   let nOfRovers = parseInt(this.state.numberOfRovers)\n    for(let i=0; i < nOfRovers; i++){\n      rovers.push(counter++)\n    }\n    this.setState({deployedRovers: rovers, start: 'ready'})\n  }\n  handleUnitsDeployment=()=>{\n    this.setState({deployUnits: true})\n  }\n  handleRoverLocationX=(e)=>{\n    this.setState({gridX: e.currentTarget.value})\n  }\n  handleRoverLocationY=(e)=>{\n    this.setState({gridY: e.currentTarget.value})\n  }\n  handleRoverMovment=()=>{\n\n    let north = 'N'\n    let south = 'S'\n    let west = 'W'\n    let east = 'E'\n    let initCoord= [1,2,\"N\"]\n    let movement = \"LMLMLMLMM\"\n    let currentX= initCoord[0]\n    let currentY= initCoord[1]\n    let currentHeading = initCoord[2]\n    movement.split(\"\")\n\n    for(let i=0; i<movement.length; i++){ //we are going to loop over movements after sliting the movement string. we going to check one by one whether is L or R to determine were the rover is heading next.\n      switch (movement[i]) {\n        case \"L\":\n          if(currentHeading == north){\n            currentHeading = west\n            finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n            break;\n          }else if(currentHeading == west){\n            currentHeading = south\n            finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n            break;\n          }else if(currentHeading == south){\n            currentHeading = east\n            finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n            break;\n          }else if(currentHeading == east){\n            currentHeading = north\n            finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n            break;\n          }\n        case \"R\":\n          if(currentHeading == north){\n            currentHeading = east\n            finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n            break;\n          }else if(currentHeading == east){\n            currentHeading = south\n            finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n            break;\n          }else if(currentHeading == south){\n            currentHeading = west\n            finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n            break;\n          }else if(currentHeading == west){\n            currentHeading = north\n            finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n            break;\n          }\n          case \"M\": \n            if(currentHeading == north){\n              currentY++\n              finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n              break;\n            }else if(currentHeading == east){\n              currentX++\n              finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n              break;\n            }else if(currentHeading == south){\n              currentY--\n              finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n              break;\n            }else if(currentHeading == west){\n              currentX--\n              finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n              break;\n            }  \n        } \n    }\n    console.log(finalCoordinates)\n    \n  }\n\n  render(){\n    return (\n      \n      <div className=\"App\"> \n      {/* <Button onClick={()=>{window.location.reload()}}>Start Again</Button> */}\n        <div className=\"input-location\">\n        <div>\n        <InputGroup className=\"mb-3\"> \n          <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\"># of Rovers</InputGroup.Text>\n          <FormControl className=\"input-group\" onChange={(e)=>{this.setState({numberOfRovers: e.currentTarget.value})}}\n          />\n          <Button onClick={this.handleRovers} variant=\"info\">Build</Button>\n          </InputGroup.Prepend>\n        </InputGroup>\n        </div>\n        {this.state.deployedRovers.map(rover => \n          <CreateRovers handleRoverLocationY={this.handleRoverLocationY} handleRoverLocationX={this.handleRoverLocationX} handleMovementsInput={this.handleMovementsInput} handleMovements={this.handleMovements} rover={rover}/>\n          )}\n         {this.state.start === \"notready\" ? null :  <Button onClick={this.handleRoverMovment} variant=\"info\">Deploy units</Button>}\n        </div>\n        {this.state.deployUnits === true\n        ?\n          this.state.data.map(data=>\n        <div>\n        <Graph data={this.state.data}/>\n       </div>\n          )\n        \n          :\n          null\n          }\n      </div>\n    );\n  }\n  \n}\n\n"]},"metadata":{},"sourceType":"module"}