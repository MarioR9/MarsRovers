{"ast":null,"code":"var _jsxFileName = \"/Users/macone/Development/codeChallenge/MarsRovers/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport { ScatterChart, Scatter, Legend, ZAxis, CartesianGrid, YAxis, XAxis, Tooltip } from 'recharts';\nlet data = [];\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMovements = e => {\n      //Regex will prevent from storing any numbers or symbols. Only storeing set moves either M or L.\n      const checkForLorM = /[^l^m]/gi;\n      let moves = this.state.roverMoves.replace(checkForLorM, '');\n      this.setState({\n        roverMoves: moves.toUpperCase()\n      });\n      data.push(moves);\n      console.log(data);\n    };\n\n    this.handleRovers = () => {\n      //handler will create instaces of the desired amount of rovers and push them into and array.\n      let counter = 1;\n      let rovers = [];\n      data = [];\n      let nOfRovers = parseInt(this.state.numberOfRovers);\n\n      for (let i = 0; i < nOfRovers; i++) {\n        rovers.push(counter++);\n      }\n\n      this.setState({\n        deployedRovers: rovers,\n        start: 'ready'\n      });\n    };\n\n    this.state = {\n      gridX: '',\n      gridY: '',\n      numberOfRovers: 0,\n      roverMoves: '',\n      deployedRovers: [],\n      start: \"notready\",\n      btnPressed: false\n    };\n  }\n\n  render() {\n    console.log(this.state.roverMoves);\n    let randomColor = '#' + Math.floor(Math.random() * 16777215).toString(16); //generate random color\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-location\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"basic-addon1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, \"Grid Bounds \"), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group\",\n      onChange: e => {\n        this.setState({\n          gridX: e.currentTarget.value\n        });\n      },\n      \"aria-label\": \"gridPositionX\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group\",\n      onChange: e => {\n        this.setState({\n          gridY: e.currentTarget.value\n        });\n      },\n      \"aria-label\": \"gridPositionY\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"basic-addon1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, \"# of Rovers\"), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group\",\n      onChange: e => {\n        this.setState({\n          numberOfRovers: e.currentTarget.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleRovers,\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, \"Build\")))), this.state.deployedRovers.map(rover => /*#__PURE__*/React.createElement(\"div\", {\n      id: rover,\n      key: rover,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"basic-addon1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, \"Rover#\", rover, \" init location\"), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group\",\n      \"aria-label\": \"gridPositionX\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group\",\n      \"aria-label\": \"gridPositionX\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(InputGroup.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, \"Movements\"), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group-move\",\n      onChange: e => {\n        this.setState({\n          roverMoves: e.currentTarget.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }), this.state.btnPressed == false ? /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleMovements,\n      variant: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 47\n      }\n    }, \"Build rover\") : null)))), this.state.start === \"notready\" ? null : /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleRovers,\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 53\n      }\n    }, \"Deploy units\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ScatterChart, {\n      width: 700,\n      height: 300,\n      margin: {\n        top: 5,\n        right: 5,\n        bottom: 5,\n        left: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"5 5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"x\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      dataKey: \"y\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ZAxis, {\n      dataKey: \"z\",\n      dataKey: \"heading/\",\n      range: [700],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      cursor: {\n        strokeDasharray: '5  5'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Scatter, {\n      name: \"rover#1\",\n      data: this.state.data,\n      fill: randomColor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/macone/Development/codeChallenge/MarsRovers/src/App.js"],"names":["React","InputGroup","FormControl","Button","ScatterChart","Scatter","Legend","ZAxis","CartesianGrid","YAxis","XAxis","Tooltip","data","App","Component","constructor","props","handleMovements","e","checkForLorM","moves","state","roverMoves","replace","setState","toUpperCase","push","console","log","handleRovers","counter","rovers","nOfRovers","parseInt","numberOfRovers","i","deployedRovers","start","gridX","gridY","btnPressed","render","randomColor","Math","floor","random","toString","currentTarget","value","map","rover","top","right","bottom","left","strokeDasharray"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport { ScatterChart,Scatter ,Legend, ZAxis, CartesianGrid, YAxis, XAxis, Tooltip } from 'recharts';\n\nlet data=[]\nexport default class App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {gridX: '',\n    gridY: '', \n    numberOfRovers: 0 ,\n    roverMoves: '', \n    deployedRovers: [],\n    start: \"notready\",\n    btnPressed: false\n  \n    };\n  }\n  handleMovements=(e)=>{ //Regex will prevent from storing any numbers or symbols. Only storeing set moves either M or L.\n    \n    const checkForLorM = /[^l^m]/gi;\n    let moves = this.state.roverMoves.replace(checkForLorM,'')\n    this.setState({roverMoves: moves.toUpperCase()})\n    data.push(moves)\n    console.log(data)\n  }\n \n  \n  handleRovers=()=>{ //handler will create instaces of the desired amount of rovers and push them into and array.\n   let counter = 1\n   let rovers = []\n   data=[]\n   let nOfRovers = parseInt(this.state.numberOfRovers)\n    for(let i=0; i < nOfRovers; i++){\n      rovers.push(counter++)\n    }\n    this.setState({deployedRovers: rovers, start: 'ready'})\n  }\n\n  render(){\n    console.log(this.state.roverMoves)\n    let randomColor = '#'+Math.floor(Math.random()*16777215).toString(16) //generate random color\n    return (\n      <div className=\"App\"> \n        <div className=\"input-location\">\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\">Grid Bounds </InputGroup.Text>\n          <FormControl className=\"input-group\" onChange={(e)=>{this.setState({gridX: e.currentTarget.value})}}\n          aria-label=\"gridPositionX\"\n          />\n          <FormControl className=\"input-group\" onChange={(e)=>{this.setState({gridY: e.currentTarget.value})}}\n          aria-label=\"gridPositionY\"\n          />\n          </InputGroup.Prepend>\n        </InputGroup>\n        <div>\n        <InputGroup className=\"mb-3\"> \n          <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\"># of Rovers</InputGroup.Text>\n          <FormControl className=\"input-group\" onChange={(e)=>{this.setState({numberOfRovers: e.currentTarget.value})}}\n          />\n          <Button onClick={this.handleRovers} variant=\"info\">Build</Button>\n          </InputGroup.Prepend>\n        </InputGroup>\n        </div>\n        {this.state.deployedRovers.map(rover => \n          <div id={rover} key={rover}> \n          <InputGroup className=\"mb-3\"> \n            <InputGroup.Prepend>\n            <InputGroup.Text id=\"basic-addon1\">Rover#{rover} init location</InputGroup.Text>\n            <FormControl className=\"input-group\" \n            aria-label=\"gridPositionX\"\n            />\n            <FormControl className=\"input-group\" \n            aria-label=\"gridPositionX\"\n            />\n            <InputGroup.Text >Movements</InputGroup.Text>\n            <FormControl className=\"input-group-move\" onChange={(e)=>{this.setState({roverMoves: e.currentTarget.value})}}\n            />\n            {this.state.btnPressed == false ? <Button onClick={this.handleMovements} variant=\"success\">Build rover</Button>: null}\n            </InputGroup.Prepend>\n          </InputGroup>\n          </div> \n          )}\n         {this.state.start === \"notready\" ? null :  <Button onClick={this.handleRovers} variant=\"info\">Deploy units</Button>}\n        </div>\n\n        <div>\n        <ScatterChart width={700} height={300}\n          margin={{ top: 5, right: 5, bottom: 5, left: 5 }}>\n          <CartesianGrid strokeDasharray=\"5 5\" />\n          <XAxis dataKey=\"x\"  />\n          <YAxis dataKey=\"y\"  />\n          <ZAxis dataKey=\"z\" dataKey=\"heading/\"  range={[700]}/>\n          <Tooltip cursor={{ strokeDasharray: '5  5' }} />\n          <Legend />\n          <Scatter name=\"rover#1\" data={this.state.data} fill={randomColor} />\n        </ScatterChart>\n        </div>\n        \n      </div>\n    );\n  }\n  \n}\n\n"]},"metadata":{},"sourceType":"module"}