{"ast":null,"code":"var _jsxFileName = \"/Users/macone/Development/codeChallenge/MarsRovers/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport CreateRovers from './components/createRovers.js';\nimport Graph from './components/graph.js';\nlet finalCoordinates = [];\nlet dataMovm = [];\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClearBtn = () => {\n      this.setState({\n        clearBtn: true\n      });\n    };\n\n    this.handleShowBtn = () => {\n      this.setState({\n        show: false\n      });\n    };\n\n    this.handleCollectBtn = () => {\n      this.setState({\n        bounds: {\n          x: this.state.boundX,\n          y: this.state.boundY\n        }\n      });\n    };\n\n    this.handleMovementsInput = e => {\n      const checkForLorM = /[^l^m^r]/gi;\n      let moves = e.currentTarget.value.replace(checkForLorM, '');\n      this.setState({\n        roverMoves: moves.toUpperCase()\n      });\n    };\n\n    this.handleRovers = () => {\n      //handler will create instaces of the desired amount of rovers and push them into and array.\n      let rovers = new Array();\n      dataMovm = [];\n      this.setState({\n        deployedRovers: rovers\n      });\n    };\n\n    this.handleRoverLocationX = e => {\n      let input = e.currentTarget.value.split(\"\");\n      this.setState({\n        gridX: input[0],\n        gridY: input[1],\n        gridZ: input[2]\n      });\n    };\n\n    this.handleInfoLoading = () => {\n      dataMovm.push({\n        x: parseInt(this.state.gridX),\n        y: parseInt(this.state.gridY),\n        mvm: this.state.roverMoves,\n        z: this.state.gridZ\n      });\n      this.setState({\n        data: dataMovm\n      });\n    };\n\n    this.handleRoverMovment = () => {\n      let north = 'N';\n      let south = 'S';\n      let west = 'W';\n      let east = 'E';\n\n      for (let k = 0; k < this.state.data.length; k++) {\n        let movement = this.state.data[k].mvm.split(\"\");\n        let currentX = this.state.data[k].x;\n        let currentY = this.state.data[k].y;\n        let currentHeading = this.state.data[k].z;\n\n        for (let i = 0; i < movement.length; i++) {\n          //we are going to loop over movements after sliting the movement string. we going to check one by one whether is L or R to determine were the rover is heading next.\n          switch (movement[i]) {\n            case \"L\":\n              if (currentHeading === north) {\n                currentHeading = west;\n                break;\n              } else if (currentHeading === west) {\n                currentHeading = south;\n                break;\n              } else if (currentHeading === south) {\n                currentHeading = east;\n                break;\n              } else if (currentHeading === east) {\n                currentHeading = north;\n                break;\n              }\n\n              break;\n\n            case \"R\":\n              if (currentHeading === north) {\n                currentHeading = east;\n                break;\n              } else if (currentHeading === east) {\n                currentHeading = south;\n                break;\n              } else if (currentHeading === south) {\n                currentHeading = west;\n                break;\n              } else if (currentHeading === west) {\n                currentHeading = north;\n                break;\n              }\n\n              break;\n\n            case \"M\":\n              if (currentHeading === north) {\n                currentY++;\n                break;\n              } else if (currentHeading === east) {\n                currentX++;\n                break;\n              } else if (currentHeading === south) {\n                currentY--;\n                break;\n              } else if (currentHeading === west) {\n                currentX--;\n                break;\n              }\n\n          }\n        }\n\n        finalCoordinates.push({\n          data: [[\"x\", `heading: ${currentHeading}`], [this.state.data[k].x, this.state.data[k].y], [currentX, currentY]]\n        });\n      }\n    };\n\n    this.state = {\n      gridX: !'',\n      gridY: '',\n      gridZ: '',\n      numberOfRovers: 0,\n      roverMoves: '',\n      deployedRovers: [],\n      start: false,\n      disabled: false,\n      deployUnits: false,\n      data: [],\n      clearBtn: false,\n      boundX: '',\n      boundY: '',\n      bounds: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, this.state.clearBtn === true ? /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        window.location.reload();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 41\n      }\n    }, \"Clear\") : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-location\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      className: \"mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"basic-addon1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, \"Bonds\"), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group\",\n      onChange: e => {\n        this.setState({\n          boundX: e.currentTarget.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group\",\n      onChange: e => {\n        this.setState({\n          boundY: e.currentTarget.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleCollectBtn,\n      disabled: this.state.disabled,\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    }, \"Collect!\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"basic-addon1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, \" Rovers \"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleRovers,\n      disabled: this.state.disabled,\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, \"Build\")))), this.state.deployedRovers.map(rover => /*#__PURE__*/React.createElement(CreateRovers, {\n      rover: rover,\n      key: rover,\n      handleRoverLocationZ: this.handleRoverLocationZ,\n      handleRoverLocationY: this.handleRoverLocationY,\n      handleRoverLocationX: this.handleRoverLocationX,\n      handleMovementsInput: this.handleMovementsInput,\n      handleInfoLoading: this.handleInfoLoading,\n      numberOfRovers: this.state.numberOfRovers,\n      handleRoverMovment: this.handleRoverMovment,\n      data: this.state.data,\n      show: this.state.show,\n      closeShow: this.state.handleShowBtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, finalCoordinates.map(data => /*#__PURE__*/React.createElement(Graph, {\n      bounds: this.state.bounds,\n      handleClearBtn: this.handleClearBtn,\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 10\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/macone/Development/codeChallenge/MarsRovers/src/App.js"],"names":["React","InputGroup","FormControl","Button","CreateRovers","Graph","finalCoordinates","dataMovm","App","Component","constructor","props","handleClearBtn","setState","clearBtn","handleShowBtn","show","handleCollectBtn","bounds","x","state","boundX","y","boundY","handleMovementsInput","e","checkForLorM","moves","currentTarget","value","replace","roverMoves","toUpperCase","handleRovers","rovers","Array","deployedRovers","handleRoverLocationX","input","split","gridX","gridY","gridZ","handleInfoLoading","push","parseInt","mvm","z","data","handleRoverMovment","north","south","west","east","k","length","movement","currentX","currentY","currentHeading","i","numberOfRovers","start","disabled","deployUnits","render","window","location","reload","map","rover","handleRoverLocationZ","handleRoverLocationY"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,MAAlC,QAAgD,iBAAhD;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AAEA,IAAIC,gBAAgB,GAAG,EAAvB;AACA,IAAIC,QAAQ,GAAC,EAAb;AAEA,eAAe,MAAMC,GAAN,SAAkBR,KAAK,CAACS,SAAxB,CAAiC;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAmBnBC,cAnBmB,GAmBJ,MAAI;AACjB,WAAKC,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAAd;AACD,KArBkB;;AAAA,SAsBnBC,aAtBmB,GAsBL,MAAI;AAChB,WAAKF,QAAL,CAAc;AAACG,QAAAA,IAAI,EAAE;AAAP,OAAd;AACD,KAxBkB;;AAAA,SAyBnBC,gBAzBmB,GAyBF,MAAI;AACnB,WAAKJ,QAAL,CAAc;AAACK,QAAAA,MAAM,EAAE;AAACC,UAAAA,CAAC,EAAC,KAAKC,KAAL,CAAWC,MAAd;AAAsBC,UAAAA,CAAC,EAAC,KAAKF,KAAL,CAAWG;AAAnC;AAAT,OAAd;AACD,KA3BkB;;AAAA,SA4BnBC,oBA5BmB,GA4BGC,CAAD,IAAK;AACxB,YAAMC,YAAY,GAAG,YAArB;AACA,UAAIC,KAAK,GAAGF,CAAC,CAACG,aAAF,CAAgBC,KAAhB,CAAsBC,OAAtB,CAA8BJ,YAA9B,EAA2C,EAA3C,CAAZ;AACA,WAAKb,QAAL,CAAc;AAACkB,QAAAA,UAAU,EAAEJ,KAAK,CAACK,WAAN;AAAb,OAAd;AACD,KAhCkB;;AAAA,SAiCnBC,YAjCmB,GAiCN,MAAI;AAAE;AAClB,UAAIC,MAAM,GAAG,IAAIC,KAAJ,EAAb;AACA5B,MAAAA,QAAQ,GAAC,EAAT;AACD,WAAKM,QAAL,CAAc;AAACuB,QAAAA,cAAc,EAAEF;AAAjB,OAAd;AACC,KArCkB;;AAAA,SAuCnBG,oBAvCmB,GAuCGZ,CAAD,IAAK;AACxB,UAAIa,KAAK,GAAGb,CAAC,CAACG,aAAF,CAAgBC,KAAhB,CAAsBU,KAAtB,CAA4B,EAA5B,CAAZ;AACA,WAAK1B,QAAL,CAAc;AAAC2B,QAAAA,KAAK,EAAEF,KAAK,CAAC,CAAD,CAAb;AAAiBG,QAAAA,KAAK,EAAEH,KAAK,CAAC,CAAD,CAA7B;AAAkCI,QAAAA,KAAK,EAAEJ,KAAK,CAAC,CAAD;AAA9C,OAAd;AACD,KA1CkB;;AAAA,SA2CnBK,iBA3CmB,GA2CD,MAAI;AACpBpC,MAAAA,QAAQ,CAACqC,IAAT,CAAc;AAACzB,QAAAA,CAAC,EAAE0B,QAAQ,CAAC,KAAKzB,KAAL,CAAWoB,KAAZ,CAAZ;AACdlB,QAAAA,CAAC,EAAEuB,QAAQ,CAAC,KAAKzB,KAAL,CAAWqB,KAAZ,CADG;AAEdK,QAAAA,GAAG,EAAE,KAAK1B,KAAL,CAAWW,UAFF;AAGdgB,QAAAA,CAAC,EAAE,KAAK3B,KAAL,CAAWsB;AAHA,OAAd;AAIA,WAAK7B,QAAL,CAAc;AAACmC,QAAAA,IAAI,EAAEzC;AAAP,OAAd;AACD,KAjDkB;;AAAA,SAkDnB0C,kBAlDmB,GAkDA,MAAI;AACrB,UAAIC,KAAK,GAAG,GAAZ;AACA,UAAIC,KAAK,GAAG,GAAZ;AACA,UAAIC,IAAI,GAAG,GAAX;AACA,UAAIC,IAAI,GAAG,GAAX;;AAEA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,KAAKlC,KAAL,CAAW4B,IAAX,CAAgBO,MAA/B,EAAuCD,CAAC,EAAxC,EAA2C;AACzC,YAAIE,QAAQ,GAAG,KAAKpC,KAAL,CAAW4B,IAAX,CAAgBM,CAAhB,EAAmBR,GAAnB,CAAuBP,KAAvB,CAA6B,EAA7B,CAAf;AACA,YAAIkB,QAAQ,GAAE,KAAKrC,KAAL,CAAW4B,IAAX,CAAgBM,CAAhB,EAAmBnC,CAAjC;AACA,YAAIuC,QAAQ,GAAE,KAAKtC,KAAL,CAAW4B,IAAX,CAAgBM,CAAhB,EAAmBhC,CAAjC;AACA,YAAIqC,cAAc,GAAG,KAAKvC,KAAL,CAAW4B,IAAX,CAAgBM,CAAhB,EAAmBP,CAAxC;;AAEA,aAAI,IAAIa,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACJ,QAAQ,CAACD,MAAxB,EAAgCK,CAAC,EAAjC,EAAoC;AAAE;AACpC,kBAAQJ,QAAQ,CAACI,CAAD,CAAhB;AACE,iBAAK,GAAL;AACE,kBAAGD,cAAc,KAAKT,KAAtB,EAA4B;AAC1BS,gBAAAA,cAAc,GAAGP,IAAjB;AACA;AACD,eAHD,MAGM,IAAGO,cAAc,KAAKP,IAAtB,EAA2B;AAC/BO,gBAAAA,cAAc,GAAGR,KAAjB;AACA;AACD,eAHK,MAGA,IAAGQ,cAAc,KAAKR,KAAtB,EAA4B;AAChCQ,gBAAAA,cAAc,GAAGN,IAAjB;AACA;AACD,eAHK,MAGA,IAAGM,cAAc,KAAKN,IAAtB,EAA2B;AAC/BM,gBAAAA,cAAc,GAAGT,KAAjB;AACA;AACD;;AACD;;AACF,iBAAK,GAAL;AACE,kBAAGS,cAAc,KAAKT,KAAtB,EAA4B;AAC1BS,gBAAAA,cAAc,GAAGN,IAAjB;AACA;AACD,eAHD,MAGM,IAAGM,cAAc,KAAKN,IAAtB,EAA2B;AAC/BM,gBAAAA,cAAc,GAAGR,KAAjB;AACA;AACD,eAHK,MAGA,IAAGQ,cAAc,KAAKR,KAAtB,EAA4B;AAChCQ,gBAAAA,cAAc,GAAGP,IAAjB;AACA;AACD,eAHK,MAGA,IAAGO,cAAc,KAAKP,IAAtB,EAA2B;AAC/BO,gBAAAA,cAAc,GAAGT,KAAjB;AACA;AACD;;AACD;;AACF,iBAAK,GAAL;AACE,kBAAGS,cAAc,KAAKT,KAAtB,EAA4B;AAC1BQ,gBAAAA,QAAQ;AACR;AACD,eAHD,MAGM,IAAGC,cAAc,KAAKN,IAAtB,EAA2B;AAC/BI,gBAAAA,QAAQ;AACR;AACD,eAHK,MAGA,IAAGE,cAAc,KAAKR,KAAtB,EAA4B;AAChCO,gBAAAA,QAAQ;AACR;AACD,eAHK,MAGA,IAAGC,cAAc,KAAKP,IAAtB,EAA2B;AAC/BK,gBAAAA,QAAQ;AACR;AACH;;AA5CH;AA8CD;;AACDnD,QAAAA,gBAAgB,CAACsC,IAAjB,CAAsB;AAACI,UAAAA,IAAI,EAAC,CAAC,CAAC,GAAD,EAAM,YAAWW,cAAe,EAAhC,CAAD,EAAoC,CAAC,KAAKvC,KAAL,CAAW4B,IAAX,CAAgBM,CAAhB,EAAmBnC,CAApB,EAAsB,KAAKC,KAAL,CAAW4B,IAAX,CAAgBM,CAAhB,EAAmBhC,CAAzC,CAApC,EAAgF,CAACmC,QAAD,EAAWC,QAAX,CAAhF;AAAN,SAAtB;AACD;AAEF,KAjHkB;;AAEjB,SAAKtC,KAAL,GAAa;AACboB,MAAAA,KAAK,EAAE,CAAC,EADK;AAEbC,MAAAA,KAAK,EAAE,EAFM;AAGbC,MAAAA,KAAK,EAAE,EAHM;AAIbmB,MAAAA,cAAc,EAAE,CAJH;AAKb9B,MAAAA,UAAU,EAAE,EALC;AAMbK,MAAAA,cAAc,EAAE,EANH;AAOb0B,MAAAA,KAAK,EAAE,KAPM;AAQbC,MAAAA,QAAQ,EAAE,KARG;AASbC,MAAAA,WAAW,EAAE,KATA;AAUbhB,MAAAA,IAAI,EAAC,EAVQ;AAWblC,MAAAA,QAAQ,EAAE,KAXG;AAYbO,MAAAA,MAAM,EAAC,EAZM;AAabE,MAAAA,MAAM,EAAC,EAbM;AAcbL,MAAAA,MAAM,EAAC;AAdM,KAAb;AAgBD;;AAiGD+C,EAAAA,MAAM,GAAE;AACN,wBAEE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAK7C,KAAL,CAAWN,QAAX,KAAwB,IAAxB,gBAA+B,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAI;AAACoD,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AAAyB,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA/B,GAA+F,IADlG,eAGE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,UAAD,CAAY,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,EAAE,EAAC,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,aAAvB;AAAsC,MAAA,QAAQ,EAAG3C,CAAD,IAAK;AAAC,aAAKZ,QAAL,CAAc;AAACQ,UAAAA,MAAM,EAAEI,CAAC,CAACG,aAAF,CAAgBC;AAAzB,SAAd;AAA+C,OAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,aAAvB;AAAsC,MAAA,QAAQ,EAAGJ,CAAD,IAAK;AAAC,aAAKZ,QAAL,CAAc;AAACU,UAAAA,MAAM,EAAEE,CAAC,CAACG,aAAF,CAAgBC;AAAzB,SAAd;AAA+C,OAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAIE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKZ,gBAAtB;AAAwC,MAAA,QAAQ,EAAE,KAAKG,KAAL,CAAW2C,QAA7D;AAAuE,MAAA,OAAO,EAAC,MAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,CADA,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,eAQE,oBAAC,UAAD,CAAY,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,EAAE,EAAC,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEA,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAK9B,YAAtB;AAAoC,MAAA,QAAQ,EAAE,KAAKb,KAAL,CAAW2C,QAAzD;AAAmE,MAAA,OAAO,EAAC,MAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFA,CARF,CADA,CADA,EAiBC,KAAK3C,KAAL,CAAWgB,cAAX,CAA0BiC,GAA1B,CAA8BC,KAAK,iBAClC,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,KAArB;AAA4B,MAAA,GAAG,EAAEA,KAAjC;AACA,MAAA,oBAAoB,EAAE,KAAKC,oBAD3B;AAEA,MAAA,oBAAoB,EAAE,KAAKC,oBAF3B;AAGA,MAAA,oBAAoB,EAAE,KAAKnC,oBAH3B;AAIA,MAAA,oBAAoB,EAAE,KAAKb,oBAJ3B;AAKA,MAAA,iBAAiB,EAAE,KAAKmB,iBALxB;AAMA,MAAA,cAAc,EAAE,KAAKvB,KAAL,CAAWyC,cAN3B;AAOA,MAAA,kBAAkB,EAAE,KAAKZ,kBAPzB;AAQA,MAAA,IAAI,EAAE,KAAK7B,KAAL,CAAW4B,IARjB;AASA,MAAA,IAAI,EAAE,KAAK5B,KAAL,CAAWJ,IATjB;AAUA,MAAA,SAAS,EAAE,KAAKI,KAAL,CAAWL,aAVtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAjBD,CAHF,eAoCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCT,gBAAgB,CAAC+D,GAAjB,CAAqBrB,IAAI,iBACzB,oBAAC,KAAD;AAAQ,MAAA,MAAM,EAAE,KAAK5B,KAAL,CAAWF,MAA3B;AAAmC,MAAA,cAAc,EAAE,KAAKN,cAAxD;AAAwE,MAAA,IAAI,EAAEoC,IAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADD,CApCF,CAFF;AAgDD;;AArK6C","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport CreateRovers from './components/createRovers.js'\nimport Graph from './components/graph.js'\n\nlet finalCoordinates = []\nlet dataMovm=[]\n\nexport default class App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n    gridX: !'',\n    gridY: '', \n    gridZ: '',\n    numberOfRovers: 0 ,\n    roverMoves: '', \n    deployedRovers: [],\n    start: false,\n    disabled: false,\n    deployUnits: false,\n    data:[],\n    clearBtn: false,\n    boundX:'',\n    boundY:'',\n    bounds:[],\n    };\n  }\n  handleClearBtn=()=>{\n    this.setState({clearBtn: true})\n  }\n  handleShowBtn=()=>{\n    this.setState({show: false})\n  }\n  handleCollectBtn=()=>{\n    this.setState({bounds: {x:this.state.boundX, y:this.state.boundY}})\n  }\n  handleMovementsInput=(e)=>{\n    const checkForLorM = /[^l^m^r]/gi;\n    let moves = e.currentTarget.value.replace(checkForLorM,'')\n    this.setState({roverMoves: moves.toUpperCase()})\n  }\n  handleRovers=()=>{ //handler will create instaces of the desired amount of rovers and push them into and array.\n   let rovers = new Array()\n   dataMovm=[]\n  this.setState({deployedRovers: rovers})\n  }\n\n  handleRoverLocationX=(e)=>{\n    let input = e.currentTarget.value.split(\"\")\n    this.setState({gridX: input[0],gridY: input[1], gridZ: input[2]})\n  }\n  handleInfoLoading=()=>{\n    dataMovm.push({x: parseInt(this.state.gridX), \n    y: parseInt(this.state.gridY), \n    mvm: this.state.roverMoves, \n    z: this.state.gridZ})\n    this.setState({data: dataMovm})\n  }\n  handleRoverMovment=()=>{\n    let north = 'N'\n    let south = 'S'\n    let west = 'W'\n    let east = 'E'\n\n    for(let k=0; k<this.state.data.length; k++){\n      let movement = this.state.data[k].mvm.split(\"\")\n      let currentX= this.state.data[k].x\n      let currentY= this.state.data[k].y\n      let currentHeading = this.state.data[k].z\n\n      for(let i=0; i<movement.length; i++){ //we are going to loop over movements after sliting the movement string. we going to check one by one whether is L or R to determine were the rover is heading next.\n        switch (movement[i]) {\n          case \"L\":\n            if(currentHeading === north){\n              currentHeading = west\n              break;\n            }else if(currentHeading === west){\n              currentHeading = south\n              break;\n            }else if(currentHeading === south){\n              currentHeading = east\n              break;\n            }else if(currentHeading === east){\n              currentHeading = north\n              break;\n            }\n            break;\n          case \"R\":\n            if(currentHeading === north){\n              currentHeading = east\n              break;\n            }else if(currentHeading === east){\n              currentHeading = south\n              break;\n            }else if(currentHeading === south){\n              currentHeading = west\n              break;\n            }else if(currentHeading === west){\n              currentHeading = north\n              break;\n            }\n            break;\n          case \"M\": \n            if(currentHeading === north){\n              currentY++\n              break;\n            }else if(currentHeading === east){\n              currentX++\n              break;\n            }else if(currentHeading === south){\n              currentY--\n              break;\n            }else if(currentHeading === west){\n              currentX--\n              break;\n          }  \n        }\n      }\n      finalCoordinates.push({data:[[\"x\",`heading: ${currentHeading}`],[this.state.data[k].x,this.state.data[k].y],[currentX, currentY]]})\n    }\n   \n  }\n\n  render(){\n    return (\n      \n      <div className=\"App\">\n        {this.state.clearBtn === true ? <Button onClick={()=>{window.location.reload()}}>Clear</Button>:null}\n      \n        <div className=\"input-location\">\n        <div>\n        <InputGroup className=\"mb-2\"> \n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\">Bonds</InputGroup.Text>\n          <FormControl className=\"input-group\"  onChange={(e)=>{this.setState({boundX: e.currentTarget.value})}}/>\n          <FormControl className=\"input-group\"  onChange={(e)=>{this.setState({boundY: e.currentTarget.value})}}/>\n          <Button onClick={this.handleCollectBtn} disabled={this.state.disabled} variant=\"info\">Collect!</Button>\n          </InputGroup.Prepend>\n          <br></br>\n          <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\"> Rovers </InputGroup.Text>\n          <Button onClick={this.handleRovers} disabled={this.state.disabled} variant=\"info\">Build</Button>\n          </InputGroup.Prepend>\n        </InputGroup>\n        </div>\n\n        {this.state.deployedRovers.map(rover => \n          <CreateRovers rover={rover} key={rover}\n          handleRoverLocationZ={this.handleRoverLocationZ} \n          handleRoverLocationY={this.handleRoverLocationY} \n          handleRoverLocationX={this.handleRoverLocationX} \n          handleMovementsInput={this.handleMovementsInput} \n          handleInfoLoading={this.handleInfoLoading}\n          numberOfRovers={this.state.numberOfRovers}\n          handleRoverMovment={this.handleRoverMovment}\n          data={this.state.data}\n          show={this.state.show}\n          closeShow={this.state.handleShowBtn}/>\n        )}\n\n        </div>\n      \n        <div>\n        {finalCoordinates.map(data =>\n         <Graph  bounds={this.state.bounds} handleClearBtn={this.handleClearBtn} data={data}/>\n        )}\n        </div>\n        \n       \n          \n      </div>\n    );\n  }\n  \n}\n\n"]},"metadata":{},"sourceType":"module"}