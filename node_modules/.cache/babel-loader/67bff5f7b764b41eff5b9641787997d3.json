{"ast":null,"code":"var _jsxFileName = \"/Users/macone/Development/codeChallenge/MarsRovers/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport CreateRovers from './components/createRovers.js';\nimport Graph from './components/graph.js';\nlet dataMovm = [];\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMovements = e => {\n      //Regex will prevent from storing any numbers or symbols. Only storeing set moves either M or L.\n      dataMovm.push({\n        x: this.state.gridX,\n        y: this.state.gridY,\n        mvm: this.state.roverMoves\n      });\n      this.setState({\n        data: dataMovm\n      });\n    };\n\n    this.handleMovementsInput = e => {\n      const checkForLorM = /[^l^m]/gi;\n      let moves = e.currentTarget.value.replace(checkForLorM, '');\n      this.setState({\n        roverMoves: moves.toUpperCase()\n      });\n    };\n\n    this.handleRovers = () => {\n      //handler will create instaces of the desired amount of rovers and push them into and array.\n      let counter = 1;\n      let rovers = [];\n      dataMovm = [];\n      let nOfRovers = parseInt(this.state.numberOfRovers);\n\n      for (let i = 0; i < nOfRovers; i++) {\n        rovers.push(counter++);\n      }\n\n      this.setState({\n        deployedRovers: rovers,\n        start: 'ready'\n      });\n    };\n\n    this.handleRoverLocationX = e => {\n      this.setState({\n        gridX: e.currentTarget.value\n      });\n    };\n\n    this.handleRoverLocationZ = e => {\n      this.setState({\n        gridZ: e.currentTarget.value\n      });\n    };\n\n    this.handleRoverLocationY = e => {\n      this.setState({\n        gridY: e.currentTarget.value\n      });\n    };\n\n    this.handleRoverMovment = () => {\n      this.setState({\n        deployUnits: true\n      });\n      let finalCoordinates = [];\n      let north = 'N';\n      let south = 'S';\n      let west = 'W';\n      let east = 'E';\n\n      for (let u = 0; u < this.state.data; u++) {\n        let initCoord = [this.state.data[u].x, this.state.data[u].y, this.state.data[u].z];\n        let movement = this.state.data.mvm[u].split(\"\");\n        let currentX = initCoord[u][0];\n        let currentY = initCoord[u][1];\n        let currentHeading = initCoord[2];\n        console.log(initCoord + \" \" + movement + \" \" + currentX + \" \" + currentY + \" \" + currentHeading);\n\n        for (let i = 0; i < movement.length; i++) {\n          //we are going to loop over movements after sliting the movement string. we going to check one by one whether is L or R to determine were the rover is heading next.\n          switch (movement[i]) {\n            case \"L\":\n              if (currentHeading === north) {\n                currentHeading = west;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  heading: currentHeading\n                });\n                break;\n              } else if (currentHeading === west) {\n                currentHeading = south;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  heading: currentHeading\n                });\n                break;\n              } else if (currentHeading === south) {\n                currentHeading = east;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  heading: currentHeading\n                });\n                break;\n              } else if (currentHeading === east) {\n                currentHeading = north;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  heading: currentHeading\n                });\n                break;\n              }\n\n              break;\n\n            case \"R\":\n              if (currentHeading === north) {\n                currentHeading = east;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  heading: currentHeading\n                });\n                break;\n              } else if (currentHeading === east) {\n                currentHeading = south;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  heading: currentHeading\n                });\n                break;\n              } else if (currentHeading === south) {\n                currentHeading = west;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  heading: currentHeading\n                });\n                break;\n              } else if (currentHeading === west) {\n                currentHeading = north;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  heading: currentHeading\n                });\n                break;\n              }\n\n              break;\n\n            case \"M\":\n              //we are checking to move 1 point to the correct direction.\n              if (currentHeading === north) {\n                currentY++;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  heading: currentHeading\n                });\n                break;\n              } else if (currentHeading === east) {\n                currentX++;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  heading: currentHeading\n                });\n                break;\n              } else if (currentHeading === south) {\n                currentY--;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  heading: currentHeading\n                });\n                break;\n              } else if (currentHeading === west) {\n                currentX--;\n                finalCoordinates.push({\n                  x: currentX,\n                  y: currentY,\n                  heading: currentHeading\n                });\n                break;\n              }\n\n          }\n\n          console.log(\"1\" + finalCoordinates);\n        }\n\n        console.log(\"2\" + finalCoordinates);\n      }\n\n      console.log(\"3\" + finalCoordinates);\n    };\n\n    this.state = {\n      gridX: '',\n      gridY: '',\n      gridZ: '',\n      numberOfRovers: 0,\n      roverMoves: '',\n      deployedRovers: [],\n      start: \"notready\",\n      disabled: false,\n      deployUnits: false,\n      data: [],\n      roversDeployed: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, this.handleRoverMovment, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-location\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      id: \"basic-addon1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, \"# of Rovers\"), /*#__PURE__*/React.createElement(FormControl, {\n      className: \"input-group\",\n      onChange: e => {\n        this.setState({\n          numberOfRovers: e.currentTarget.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleRovers,\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }, \"Build\")))), this.state.deployedRovers.map(rover => /*#__PURE__*/React.createElement(CreateRovers, {\n      handleRoverLocationZ: this.handleRoverLocationZ,\n      handleRoverLocationY: this.handleRoverLocationY,\n      handleRoverLocationX: this.handleRoverLocationX,\n      handleMovementsInput: this.handleMovementsInput,\n      handleMovements: this.handleMovements,\n      rover: rover,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    })), this.state.start === \"notready\" ? null : /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleRoverMovment,\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 53\n      }\n    }, \"Deploy units\")), this.state.deployUnits === true ? this.state.data.map(data => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Graph, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    }))) : null);\n  }\n\n}","map":{"version":3,"sources":["/Users/macone/Development/codeChallenge/MarsRovers/src/App.js"],"names":["React","InputGroup","FormControl","Button","CreateRovers","Graph","dataMovm","App","Component","constructor","props","handleMovements","e","push","x","state","gridX","y","gridY","mvm","roverMoves","setState","data","handleMovementsInput","checkForLorM","moves","currentTarget","value","replace","toUpperCase","handleRovers","counter","rovers","nOfRovers","parseInt","numberOfRovers","i","deployedRovers","start","handleRoverLocationX","handleRoverLocationZ","gridZ","handleRoverLocationY","handleRoverMovment","deployUnits","finalCoordinates","north","south","west","east","u","initCoord","z","movement","split","currentX","currentY","currentHeading","console","log","length","heading","disabled","roversDeployed","render","map","rover"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport CreateRovers from './components/createRovers.js'\nimport Graph from './components/graph.js'\n\n\nlet dataMovm=[]\nexport default class App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {gridX: '',\n    gridY: '',\n    gridZ: '', \n    numberOfRovers: 0 ,\n    roverMoves: '', \n    deployedRovers: [],\n    start: \"notready\",\n    disabled: false,\n    deployUnits: false,\n    data:[],\n    roversDeployed: []\n    };\n  }\n  handleMovements=(e)=>{ //Regex will prevent from storing any numbers or symbols. Only storeing set moves either M or L.\n    dataMovm.push({x:this.state.gridX,y:this.state.gridY,mvm:this.state.roverMoves})\n    this.setState({data: dataMovm})\n  }\n \n  handleMovementsInput=(e)=>{\n    const checkForLorM = /[^l^m]/gi;\n    let moves = e.currentTarget.value.replace(checkForLorM,'')\n    this.setState({roverMoves: moves.toUpperCase()})\n  }\n  handleRovers=()=>{ //handler will create instaces of the desired amount of rovers and push them into and array.\n   let counter = 1\n   let rovers = []\n   dataMovm=[]\n   let nOfRovers = parseInt(this.state.numberOfRovers)\n    for(let i=0; i < nOfRovers; i++){\n      rovers.push(counter++)\n    }\n    this.setState({deployedRovers: rovers, start: 'ready'})\n  }\n  handleRoverLocationX=(e)=>{\n    this.setState({gridX: e.currentTarget.value})\n  }\n  handleRoverLocationZ=(e)=>{\n    this.setState({gridZ: e.currentTarget.value})\n  }\n  handleRoverLocationY=(e)=>{\n    this.setState({gridY: e.currentTarget.value})\n  }\n  handleRoverMovment=()=>{\n    this.setState({deployUnits: true})\n    let finalCoordinates = []\n    let north = 'N'\n    let south = 'S'\n    let west = 'W'\n    let east = 'E'\n\n    for(let u= 0; u<this.state.data; u++){\n      let initCoord= [this.state.data[u].x,this.state.data[u].y,this.state.data[u].z]\n      let movement = this.state.data.mvm[u].split(\"\")\n      let currentX= initCoord[u][0]\n      let currentY= initCoord[u][1]\n      let currentHeading = initCoord[2]\n      console.log(initCoord + \" \" + movement + \" \" + currentX + \" \" + currentY + \" \" + currentHeading)\n\n      for(let i=0; i<movement.length; i++){ //we are going to loop over movements after sliting the movement string. we going to check one by one whether is L or R to determine were the rover is heading next.\n        switch (movement[i]) {\n          case \"L\":\n            if(currentHeading === north){\n              currentHeading = west\n              finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n              break;\n            }else if(currentHeading === west){\n              currentHeading = south\n              finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n              break;\n            }else if(currentHeading === south){\n              currentHeading = east\n              finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n              break;\n            }else if(currentHeading === east){\n              currentHeading = north\n              finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n              break;\n            }\n            break;\n          case \"R\":\n            if(currentHeading === north){\n              currentHeading = east\n              finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n              break;\n            }else if(currentHeading === east){\n              currentHeading = south\n              finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n              break;\n            }else if(currentHeading === south){\n              currentHeading = west\n              finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n              break;\n            }else if(currentHeading === west){\n              currentHeading = north\n              finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n              break;\n            }\n            break;\n            case \"M\":   //we are checking to move 1 point to the correct direction.\n              if(currentHeading === north){\n                currentY++\n                finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n                break;\n              }else if(currentHeading === east){\n                currentX++\n                finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n                break;\n              }else if(currentHeading === south){\n                currentY--\n                finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n                break;\n              }else if(currentHeading === west){\n                currentX--\n                finalCoordinates.push({x:currentX, y:currentY, heading:currentHeading})\n                break;\n              }  \n          } \n          console.log(\"1\" + finalCoordinates)\n      }\n      console.log(\"2\" + finalCoordinates)\n    }\n    console.log(\"3\" + finalCoordinates)\n    \n    \n  }\n\n  render(){\n    return (\n      \n      <div className=\"App\"> \n      {this.handleRoverMovment}\n      {/* <Button onClick={()=>{window.location.reload()}}>Start Again</Button> */}\n        <div className=\"input-location\">\n        <div>\n        <InputGroup className=\"mb-3\"> \n          <InputGroup.Prepend>\n          <InputGroup.Text id=\"basic-addon1\"># of Rovers</InputGroup.Text>\n          <FormControl className=\"input-group\" onChange={(e)=>{this.setState({numberOfRovers: e.currentTarget.value})}}\n          />\n          <Button onClick={this.handleRovers} variant=\"info\">Build</Button>\n          </InputGroup.Prepend>\n        </InputGroup>\n        </div>\n        {this.state.deployedRovers.map(rover => \n          <CreateRovers handleRoverLocationZ={this.handleRoverLocationZ} handleRoverLocationY={this.handleRoverLocationY} handleRoverLocationX={this.handleRoverLocationX} handleMovementsInput={this.handleMovementsInput} handleMovements={this.handleMovements} rover={rover}/>\n          )}\n         {this.state.start === \"notready\" ? null :  <Button onClick={this.handleRoverMovment} variant=\"info\">Deploy units</Button>}\n        </div>\n        {this.state.deployUnits === true\n        ?\n          this.state.data.map(data=>\n        <div>\n        <Graph/>\n       </div>\n          )\n        \n          :\n          null\n          }\n      </div>\n    );\n  }\n  \n}\n\n"]},"metadata":{},"sourceType":"module"}